Sure! Here's an example of a simple React web application that uses multiple components for a header, footer, and content:

```
import React from 'react';
import ReactDOM from 'react-dom';

// Header component
function Header() {
  return (
    <header>
      <h1>My React App</h1>
      <nav>
        <ul>
          <li><a href="#">Home</a></li>
          <li><a href="#">About</a></li>
          <li><a href="#">Contact</a></li>
        </ul>
      </nav>
    </header>
  );
}

// Footer component
function Footer() {
  return (
    <footer>
      <p>Copyright Â© My React App</p>
    </footer>
  );
}

// Content component
function Content() {
  return (
    <main>
      <h2>Welcome to My React App</h2>
      <p>Here is some content for my app</p>
    </main>
  );
}

// App component that uses Header, Footer, and Content
function App() {
  return (
    <>
      <Header />
      <Content />
      <Footer />
    </>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));
```

In this example, we have three components: Header, Footer, and Content. They are all defined as functions that return JSX (a syntax extension for JavaScript to define React elements). 

The App component is the root component that uses the other three components as child components. We render the App component using `ReactDOM.render` and mount it to a DOM node with the `id` of `root`.

This is a simple example of how we can use React to create a web application with multiple components.