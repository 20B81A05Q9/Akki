(13,14)Parent to Child and Child to Parent

parent.component.html:
<div>
  <h2>Parent Component</h2>
  <p>Message received from child: {{ childMessage }}</p>
  <app-child (messageEvent)="receiveMessage($event)"></app-child>
</div>

parent.component.ts:
import { Component } from '@angular/core';
@Component({
  selector: 'app-parent',
  templateUrl: './parent.component.html',
  styleUrls: ['./parent.component.css']
})
export class ParentComponent {
  childMessage: string;

  receiveMessage(message: string) {
    this.childMessage = message;
  }
}

child.component.html:

<div>
  <h3>Child Component</h3>
  <input type="text" [(ngModel)]="message" (keyup)="sendMessage()">
</div>

child.component.ts:
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css']
})
export class ChildComponent {
  message: string;

  @Output() messageEvent = new EventEmitter<string>();

  sendMessage() {
    this.messageEvent.emit(this.message);
  }
}